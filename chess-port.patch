diff --git a/GNUChessActivity.py b/GNUChessActivity.py
index d19fb9f..e298701 100644
--- a/GNUChessActivity.py
+++ b/GNUChessActivity.py
@@ -11,6 +11,8 @@
 # along with this library; if not, write to the Free Software
 # Foundation, 51 Franklin Street, Suite 500 Boston, MA 02110-1335 USA
 
+import os
+import shutil
 
 import gi
 gi.require_version('Gtk', '3.0')
@@ -32,6 +34,9 @@ from sugar3.datastore import datastore
 from sugar3 import mime
 from sugar3 import profile
 
+from sugarapp.widgets import SugarCompatibleActivity
+from sugarapp.widgets import DesktopOpenChooser
+
 from toolbar_utils import button_factory, label_factory, separator_factory, \
     radio_factory, entry_factory
 from utils import json_load, json_dump, get_hardware, \
@@ -59,7 +64,7 @@ PIECES = {'pawn': {'white': _('White Pawn'), 'black': _('Black Pawn')},
           'king': {'white': _('White King'), 'black': _('Black King')}}
 
 
-class GNUChessActivity(activity.Activity):
+class GNUChessActivity(SugarCompatibleActivity):
     ''' Gnuchess interface from Sugar '''
 
     def __init__(self, handle):
@@ -661,39 +666,19 @@ class GNUChessActivity(activity.Activity):
         self.do_custom_skin_cb()
 
     def _choose_skin(self):
-        ''' Select a skin from the Journal '''
-        chooser = None
-        name = None
-        if hasattr(mime, 'GENERIC_TYPE_IMAGE'):
-            if 'image/svg+xml' not in \
-                    mime.get_generic_type(mime.GENERIC_TYPE_IMAGE).mime_types:
-                mime.get_generic_type(
-                    mime.GENERIC_TYPE_IMAGE).mime_types.append('image/svg+xml')
-            chooser = ObjectChooser(parent=self,
-                                    what_filter=mime.GENERIC_TYPE_IMAGE)
-        else:
-            try:
-                chooser = ObjectChooser(parent=self, what_filter=None)
-            except TypeError:
-                chooser = ObjectChooser(
-                    None, activity,
-                    Gtk.DialogType.MODAL | Gtk.DialogType.DESTROY_WITH_PARENT)
-        if chooser is not None:
-            try:
-                result = chooser.run()
-                if result == Gtk.ResponseType.ACCEPT:
-                    jobject = chooser.get_selected_object()
-                    if jobject and jobject.file_path:
-                        name = jobject.metadata['title']
-            finally:
-                jobject.destroy()
-                chooser.destroy()
-                del chooser
-            if name is not None:
-                return jobject.object_id, jobject.file_path
-        else:
+        chooser = DesktopOpenChooser(self)
+        filename = chooser.get_filename()
+
+        if not filename:
             return None, None
 
+        name = os.path.basename(filename)
+        path = os.path.join(self.get_activity_root(), name)
+
+        shutil.copyfile(filename, path)
+
+        return path, path
+
     def _take_button_action(self, button):
         if button == 'black':
             self.playing_white = False
