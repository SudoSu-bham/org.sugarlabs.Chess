diff --git a/GNUChessActivity.py b/GNUChessActivity.py
index e298701..19ee12e 100644
--- a/GNUChessActivity.py
+++ b/GNUChessActivity.py
@@ -36,6 +36,7 @@ from sugar3 import profile
 
 from sugarapp.widgets import SugarCompatibleActivity
 from sugarapp.widgets import DesktopOpenChooser
+from sugarapp.helpers import PrimaryMonitor
 
 from toolbar_utils import button_factory, label_factory, separator_factory, \
     radio_factory, entry_factory
@@ -98,7 +99,7 @@ class GNUChessActivity(SugarCompatibleActivity):
 
         # Create a canvas
         canvas = Gtk.DrawingArea()
-        canvas.set_size_request(Gdk.Screen.width(), Gdk.Screen.height())
+        canvas.set_size_request(PrimaryMonitor.width(), PrimaryMonitor.height())
         self.set_canvas(canvas)
         canvas.show()
         self.show_all()
diff --git a/chess.py b/chess.py
index 065fe17..145f264 100644
--- a/chess.py
+++ b/chess.py
@@ -24,6 +24,8 @@ from sprites import Sprites, Sprite
 from piece import svg_header, svg_footer, svg_king, svg_queen, svg_bishop, \
     svg_knight, svg_rook, svg_pawn
 
+from sugarapp.helpers import PrimaryMonitor
+
 ROBOT_MOVE = 'My move is : '
 TOP = 3
 MID = 2
@@ -85,8 +87,8 @@ class Gnuchess():
         self._canvas.connect("button-release-event", self._button_release_cb)
         self._canvas.connect("motion-notify-event", self._mouse_move_cb)
 
-        self._width = Gdk.Screen.width()
-        self._height = Gdk.Screen.height()
+        self._width = PrimaryMonitor.width()
+        self._height = PrimaryMonitor.height()
         self.scale = int((self._height - 55) / 10)
         self.we_are_sharing = False
 
@@ -1843,8 +1845,8 @@ class Gnuchess():
                                8 * self.scale, self.scale))
         self.file.set_layer(0)
 
-        x = int((Gdk.Screen.width() - 6 * self.scale) / 2.)
-        y = int((Gdk.Screen.height() - 4 * self.scale) / 2.)
+        x = int((PrimaryMonitor.width() - 6 * self.scale) / 2.)
+        y = int((PrimaryMonitor.height() - 4 * self.scale) / 2.)
         self._check_sprite = Sprite(
             self._sprites, x, y,
             self._box(self.scale * 6, self.scale, color='none'))
